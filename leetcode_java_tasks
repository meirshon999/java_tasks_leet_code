class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i = 0; i < nums.length; i++)
        {
            for(int j = i + 1; j < nums.length; j++)
            {
                if( nums[i]+nums[j] == target)
                {
                    return new int[]{i, j};
                }
            }
        }
        return new int[]{};
    }
}
//https://leetcode.com/problems/two-sum/submissions/1227760530

----------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public boolean isPalindrome(int x) {
        if (x < 0 || (x != 0 && x % 10 == 0)) {
            return false;
        }

        int reversed = 0;
        int original = x;

        while (x > reversed) {
            reversed = reversed * 10 + x % 10;
            x /= 10;
        }

        return (x == reversed) || (x == reversed / 10);
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int romanToInt(String s) {
        Map<Character, Integer> m = new HashMap<>();
        
        m.put('I', 1);
        m.put('V', 5);
        m.put('X', 10);
        m.put('L', 50);
        m.put('C', 100);
        m.put('D', 500);
        m.put('M', 1000);
        
        int ans = 0;
        
        for (int i = 0; i < s.length(); i++) {
            if (i < s.length() - 1 && m.get(s.charAt(i)) < m.get(s.charAt(i + 1))) {
                ans -= m.get(s.charAt(i));
            } else {
                ans += m.get(s.charAt(i));
            }
        }
        
        return ans;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public String longestCommonPrefix(String[] strs) {
        Arrays.sort(strs);
        String s1 = strs[0];
        String s2 = strs[strs.length-1];
        int idx = 0;
        while(idx < s1.length() && idx < s2.length()){
            if(s1.charAt(idx) == s2.charAt(idx)){
                idx++;
            } else {
                break;
            }
        }
        return s1.substring(0, idx);
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution{
    boolean isValid(String s) {
    if ((s.length() & 1) == 1) return false;
    else {
        Deque<Character> p = new ArrayDeque<>(s.length());
        for (int i = 0; i < s.length(); i++)
        switch (s.charAt(i)) {
            case '(': p.push(')'); break;
            case '{': p.push('}'); break;
            case '[': p.push(']'); break;
            case ')': case '}': case ']': if (p.isEmpty() || p.pop() != s.charAt(i)) return false;
        }
        return p.isEmpty();
    }
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int strStr(String haystack, String needle) {
       return haystack.indexOf(needle) ;
       
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int lengthOfLastWord(String s) {
        s = s.trim();
        
        int length = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) != ' ') {
                length++;
            }
            else if (length > 0) {
                break;
            }
        }
        
        return length;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
